As the Game Play subsystem, we communicate with Game Manager by receiving the current board state and a proposed move for a singular checker’s piece. After checking the legality of the move and updating the table as necessary, we send a boolean variable back to Game Manager. While if the move is legal, we send the updated game state to Game Termination.

The interfaces we will be using are methods in java that are dependent on the classes we decide on with the other subsystems.


Our possible interfaces (methods) include:

checkLegalMove(boardState, move) returns a boolean value

Checks whether the move is valid. This includes verifying that the piece’s destination is within the  bounds, the space is unoccupied, the move follows movement rules for the piece type (normal or king), and that any capture rules are followed.


notifyGameTermination(updatedBoardState)

Sends the updated board state, if there is one, to the Game Termination subsystem.

**isValidMove(boardState, move) → boolean:**

Checks whether the move is valid. This includes verifying that:

The destination coordinates are within the bounds of the board.
The move follows the legal movement rules for the piece type (normal or king).
Any mandatory capture rules are followed.

**isSameTeam(boardState, move) → boolean:**
Checks whether the source and destination pieces belong to the same team.
Used as a helper function to ensure a piece does not move into a square occupied by a teammate:

Returns true if both pieces belong to the same player/team.

Returns false if the destination is empty or contains an opponent's piece.
